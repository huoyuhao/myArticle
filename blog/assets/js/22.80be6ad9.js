(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{298:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端浏览器渲染原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端浏览器渲染原理"}},[t._v("#")]),t._v(" 前端浏览器渲染原理")]),t._v(" "),s("h2",{attrs:{id:"_1-前端浏览器渲染过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前端浏览器渲染过程"}},[t._v("#")]),t._v(" 1. 前端浏览器渲染过程")]),t._v(" "),s("p",[t._v("浏览器对内容的渲染，这一内容（渲染树构建、布局及绘制）主要包含下面几个部分：")]),t._v(" "),s("ul",[s("li",[t._v("解析HTML，生成DOM树（DOM）")]),t._v(" "),s("li",[t._v("解析CSS，生成CSSOM树（CSSOM）")]),t._v(" "),s("li",[t._v("将DOM和CSSOM合并，生成渲染树（Render-Tree）")]),t._v(" "),s("li",[t._v("计算渲染树的布局（Layout）")]),t._v(" "),s("li",[t._v("将布局渲染到屏幕上（Paint）")])]),t._v(" "),s("h2",{attrs:{id:"_2-构建dom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-构建dom树"}},[t._v("#")]),t._v(" 2. 构建DOM树")]),t._v(" "),s("p",[t._v("当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树，具体过程如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8DOM%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B.png",alt:"浏览器DOM构建过程"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("转换：")]),t._v(" 浏览器从磁盘或网络读取HTML的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成字符串。在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。")]),t._v(" "),s("li",[s("strong",[t._v("令牌化：")]),t._v(" 将字符串转换成Token，例如："),s("code",[t._v("<html>、<body>")]),t._v("等。Token中会标识出当前Token是“开始标签”或是“结束标签”亦或是“文本”等信息")]),t._v(" "),s("li",[s("strong",[t._v("词法分析：")]),t._v(" 发出的令牌转换成定义其属性和规则的“对象”")]),t._v(" "),s("li",[s("strong",[t._v("DOM构建：")]),t._v(" 由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。")])]),t._v(" "),s("h2",{attrs:{id:"_3-构建cssom规则树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-构建cssom规则树"}},[t._v("#")]),t._v(" 3. 构建CSSOM规则树")]),t._v(" "),s("p",[t._v("与处理 HTML 时一样，我们需要将收到的 CSS 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 HTML 过程，不过是为 CSS 而不是 HTML：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8CSSOM%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B-1.png",alt:"浏览器CSSOM构建过程"}})]),t._v(" "),s("p",[t._v("CSS 字节转换成字符，接着转换成令牌和节点，最后链接到一个称为“CSS 对象模型”(CSSOM) 的树结构内")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8CSSOM%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B-2.png",alt:"浏览器CSSOM构建过程"}})]),t._v(" "),s("p",[t._v("浏览器解析css过程是阻塞的，浏览器需要解析完所有的css才会使用css样式(和浏览器的回流重绘一样)")]),t._v(" "),s("p",[t._v("CSS它只显示了我们决定在样式表中替换的样式。每个浏览器都提供一组默认样式（也称为User Agent 样式），即我们不提供任何自定义样式时所看到的样式，我们的样式只是替换这些默认样式（"),s("a",{attrs:{href:"http://www.iecss.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("例如默认 IE 样式"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("h3",{attrs:{id:"_3-1-css-的继承和层叠"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-css-的继承和层叠"}},[t._v("#")]),t._v(" 3.1 CSS 的继承和层叠")]),t._v(" "),s("p",[s("strong",[t._v("层叠性")]),t._v("\n该层叠将获取给定元素上给定属性的声明值的无序列表，按声明的优先级对它们进行排序，并输出单个层叠值。")]),t._v(" "),s("p",[t._v("当多个相互冲突的CSS声明应用于同一个元素时，CSS层叠算法会根据一定的机制，从最高权重到最低权重的顺序列出著作权归作者所有，具体如下：")]),t._v(" "),s("p",[t._v("来源和重要性 -> 选择器权重 -> 出现的顺序 -> 初始和继承属性（默认值）")]),t._v(" "),s("p",[s("strong",[t._v("继承性")]),t._v("\n当元素的一个继承属性没有指定值时，则取父元素的同属性的计算值。只有文档根元素取该属性的概述中给定的初始值")]),t._v(" "),s("p",[t._v("color、 text-开头的、line-开头的、font-开头的样式可以被继承")]),t._v(" "),s("h2",{attrs:{id:"_4-构建渲染树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-构建渲染树"}},[t._v("#")]),t._v(" 4. 构建渲染树")]),t._v(" "),s("p",[t._v("浏览器将 DOM 和 CSSOM 合并成一个“渲染树”，网罗网页上所有可见的 DOM 内容，以及每个节点的所有 CSSOM 样式信息")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B.png",alt:"浏览器渲染树构建过程"}})]),t._v(" "),s("p",[t._v("为构建渲染树，浏览器大体上完成了下列工作：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("从 DOM 树的根节点开始遍历每个可见节点")]),t._v(" "),s("ul",[s("li",[t._v("某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。")]),t._v(" "),s("li",[t._v("某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，上例中的 span 节点不会出现在渲染树中，因为有一个显式规则在该节点上设置了“display: none”属性")])])]),t._v(" "),s("li",[s("p",[t._v("对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们")])]),t._v(" "),s("li",[s("p",[t._v("发射可见节点，连同其内容和计算的样式")])])]),t._v(" "),s("p",[t._v("请注意 visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分")]),t._v(" "),s("h2",{attrs:{id:"_5-渲染树布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-渲染树布局"}},[t._v("#")]),t._v(" 5. 渲染树布局")]),t._v(" "),s("p",[t._v("布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置，布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小")]),t._v(" "),s("h3",{attrs:{id:"_5-1-分层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-分层"}},[t._v("#")]),t._v(" 5.1 分层")]),t._v(" "),s("p",[t._v("因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("拥有层叠上下文属性的元素会被提升为单独的一层")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E7%A4%BA%E6%84%8F%E5%9B%BE.png",alt:"层叠上下文示意图"}})]),t._v(" "),s("p",[t._v("从图中可以看出，明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等，都拥有层叠上下文属性")])]),t._v(" "),s("li",[s("p",[t._v("需要剪裁（clip）的地方也会被创建为图层\n需要剪裁也就是说容器内容不足以显示页面内容，出现了滚动条，渲染引擎会为这部分单独创建一个层")])])]),t._v(" "),s("h2",{attrs:{id:"_6-渲染树绘制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-渲染树绘制"}},[t._v("#")]),t._v(" 6. 渲染树绘制")]),t._v(" "),s("p",[t._v("在绘制阶段，遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。")]),t._v(" "),s("p",[t._v("在完成图层树的构建之后，渲染引擎会对图层树中的每个图层进行绘制")]),t._v(" "),s("h3",{attrs:{id:"_6-1-栅格化-raster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-栅格化-raster"}},[t._v("#")]),t._v(" 6.1 栅格化(raster)")]),t._v(" "),s("p",[t._v("要明白栅格化，先要理解什么是图块和位图。")]),t._v(" "),s("p",[s("strong",[t._v("图块(tile)")]),t._v("\n图块是渲染进程即浏览器内核当中的合成线程将图层划分为大小512x512或者256x256的区块")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%A0%85%E6%A0%BC%E5%8C%96-1.png",alt:"浏览器渲染栅格化"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%A0%85%E6%A0%BC%E5%8C%96-2.png",alt:"浏览器渲染栅格化"}})]),t._v(" "),s("p",[s("strong",[t._v("位图")]),t._v("\n位图是栅格化的过程：合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的，将图块转换为位图。")]),t._v(" "),s("h3",{attrs:{id:"_6-2-合成和显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-合成和显示"}},[t._v("#")]),t._v(" 6.2 合成和显示")]),t._v(" "),s("p",[t._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程")]),t._v(" "),s("p",[t._v("浏览器进程里面有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上")]),t._v(" "),s("h2",{attrs:{id:"_7-渲染流水线总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-渲染流水线总结"}},[t._v("#")]),t._v(" 7. 渲染流水线总结")]),t._v(" "),s("p",[t._v("从HTML到DOM、样式计算、布局、图层、绘制、光栅化、合成和显示。下面一张图是总结下这整个渲染流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E6%80%BB%E7%BB%93.png",alt:"浏览器渲染进程总结"}})]),t._v(" "),s("ol",[s("li",[t._v("渲染进程将HTML内容转换为能够读懂的"),s("code",[t._v("DOM树")]),t._v("结构。")]),t._v(" "),s("li",[t._v("渲染引擎将CSS样式表转化为浏览器可以理解的"),s("code",[t._v("styleSheets")]),t._v("，计算出DOM节点的样式。")]),t._v(" "),s("li",[t._v("创建"),s("code",[t._v("布局树")]),t._v("，并计算元素的布局信息。")]),t._v(" "),s("li",[t._v("对布局树进行分层，并生成"),s("code",[t._v("分层树")]),t._v("。")]),t._v(" "),s("li",[t._v("为每个图层生成"),s("code",[t._v("绘制列表")]),t._v("，并将其提交到合成线程。")]),t._v(" "),s("li",[t._v("合成线程将图层分成"),s("code",[t._v("图块")]),t._v("，并在光栅化线程池中将图块转换成位图。")]),t._v(" "),s("li",[t._v("合成线程发送绘制图块命令"),s("code",[t._v("DrawQuad")]),t._v("给浏览器进程。")]),t._v(" "),s("li",[t._v("浏览器进程根据DrawQuad消息生成页面，并"),s("code",[t._v("显示")]),t._v("到显示器上。")])]),t._v(" "),s("h2",{attrs:{id:"_8-回流与重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-回流与重绘"}},[t._v("#")]),t._v(" 8. 回流与重绘")]),t._v(" "),s("h3",{attrs:{id:"_8-1-重排reflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-重排reflow"}},[t._v("#")]),t._v(" 8.1 重排Reflow")]),t._v(" "),s("p",[t._v("意味着元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E6%8E%92.png",alt:"重排"}})]),t._v(" "),s("p",[t._v("从上图可以看出，如果你通过 JavaScript 或者 CSS 修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫重排。无疑，"),s("strong",[t._v("重排需要更新完整的渲染流水线，所以开销也是最大的。")])]),t._v(" "),s("h3",{attrs:{id:"_8-2-常见引起回流-重排属性的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-常见引起回流-重排属性的方法"}},[t._v("#")]),t._v(" 8.2 常见引起回流/重排属性的方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("添加或者删除可见的DOM元素")])]),t._v(" "),s("li",[s("p",[t._v("元素尺寸改变——边距、填充、边框、宽度和高度")])]),t._v(" "),s("li",[s("p",[t._v("内容变化，比如用户在input框中输入文字")])]),t._v(" "),s("li",[s("p",[t._v("浏览器窗口尺寸改变——resize事件发生时")])]),t._v(" "),s("li",[s("p",[t._v("计算 offsetWidth 和 offsetHeight 属性")])]),t._v(" "),s("li",[s("p",[t._v("设置 style 属性的值")])])]),t._v(" "),s("p",[t._v("具体内容如下")]),t._v(" "),s("ul",[s("li",[t._v("width/height")]),t._v(" "),s("li",[t._v("margin/padding/border")]),t._v(" "),s("li",[t._v("display/position/overflow")]),t._v(" "),s("li",[t._v("clientWidth/clientHeight")]),t._v(" "),s("li",[t._v("clientTop/clientLeft")]),t._v(" "),s("li",[t._v("offsetWidth/offsetHeight")]),t._v(" "),s("li",[t._v("offsetTop/offsetLeft")]),t._v(" "),s("li",[t._v("scrollWidth/scrollHeight")]),t._v(" "),s("li",[t._v("scrollTop/scrollLeft")]),t._v(" "),s("li",[t._v("scrollIntoView()")]),t._v(" "),s("li",[t._v("scrollTo()")]),t._v(" "),s("li",[t._v("getComputedStyle()")]),t._v(" "),s("li",[t._v("getBoundingClientRect()")]),t._v(" "),s("li",[t._v("scrollIntoViewIfNeeded()")])]),t._v(" "),s("h3",{attrs:{id:"_8-3-重绘repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-重绘repaint"}},[t._v("#")]),t._v(" 8.3 重绘Repaint")]),t._v(" "),s("p",[t._v("当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98.png",alt:"重绘"}}),t._v("\n从图中可以看出，如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫重绘。"),s("strong",[t._v("相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。")])]),t._v(" "),s("p",[t._v("常见引起重绘属性的方法")]),t._v(" "),s("ul",[s("li",[t._v("visibility")]),t._v(" "),s("li",[t._v("color")]),t._v(" "),s("li",[t._v("border-style/border-radius")]),t._v(" "),s("li",[t._v("background/background-image/background-position/background-repeat/background-size")]),t._v(" "),s("li",[t._v("text-decoration")]),t._v(" "),s("li",[t._v("outline-color/outline/outline-style/outline-width")]),t._v(" "),s("li",[t._v("box-shadow")])]),t._v(" "),s("h3",{attrs:{id:"_8-4-浏览器的渲染队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-浏览器的渲染队列"}},[t._v("#")]),t._v(" 8.4 浏览器的渲染队列")]),t._v(" "),s("p",[t._v("当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作")]),t._v(" "),s("p",[s("strong",[t._v("强制刷新队列")]),t._v("\n因为队列中，可能会有影响到这些值的操作，为了给我们最精确的值，浏览器会立即重排+重绘")]),t._v(" "),s("p",[t._v("强制刷新队列的style样式请求：\n"),s("code",[t._v("offsetTop")]),t._v("、"),s("code",[t._v("offsetLeft")]),t._v("、"),s("code",[t._v("offsetWidth")]),t._v("、"),s("code",[t._v("offsetHeight、")]),t._v(" "),s("code",[t._v("scrollTop")]),t._v("、"),s("code",[t._v("scrollLeft")]),t._v("、"),s("code",[t._v("scrollWidth")]),t._v("、"),s("code",[t._v("scrollHeight")]),t._v(" "),s("code",[t._v("clientTop")]),t._v("、"),s("code",[t._v("clientLeft")]),t._v("、"),s("code",[t._v("clientWidth")]),t._v("、"),s("code",[t._v("clientHeight")]),t._v(" "),s("code",[t._v("getComputedStyle()")]),t._v("， 或者 IE的 "),s("code",[t._v("currentStyle")])]),t._v(" "),s("p",[t._v("我们在开发中，应该谨慎的使用这些style请求，注意上下文关系，避免一行代码一个重排，这对性能是个巨大的消耗")]),t._v(" "),s("h3",{attrs:{id:"_8-5-减少重绘重排优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-减少重绘重排优化"}},[t._v("#")]),t._v(" 8.5 减少重绘重排优化")]),t._v(" "),s("ol",[s("li",[t._v("分离读写操作")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad 4次重排+重绘")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10px'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10px'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good 一次重排")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10px'")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10px'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("样式集中改变")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),t._v("\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("className "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"className"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"; left: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px; top: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px;"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("离线改变dom")])]),t._v(" "),s("ul",[s("li",[t._v("隐藏要操作的dom")])]),t._v(" "),s("p",[t._v("在要操作dom之前，通过display隐藏dom，当操作完成之后，才将元素的display属性为可见，因为不可见的元素不会触发重排和重绘")]),t._v(" "),s("ul",[s("li",[t._v("将原始元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ul "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'list'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendDataToElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("避免触发同步布局事件")])]),t._v(" "),s("p",[t._v("当我们访问元素的一些属性的时候，会导致浏览器强制清空队列，强制刷新队列，所以避免使用这些属性")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("对于复杂动画效果，使用绝对定位让其脱离文档流")])]),t._v(" "),s("p",[t._v("对于复杂动画效果，由于会经常的引起回流重绘，因此，我们可以使用绝对定位，让它脱离文档流。否则会引起父元素以及后续元素频繁的回流")]),t._v(" "),s("h3",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("渲染树构建、布局及绘制"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5a8e242c5188257a6b060000",target:"_blank",rel:"noopener noreferrer"}},[t._v("十分钟读懂浏览器渲染流程"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.51cto.com/art/201810/585450.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解Chrome：HTML/CSS/JS是如何在浏览器中，渲染成你看到的页面？"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903623583891469",target:"_blank",rel:"noopener noreferrer"}},[t._v("再谈 load 与 DOMContentLoaded"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);