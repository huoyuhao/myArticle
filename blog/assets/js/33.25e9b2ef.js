(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{385:function(e,r,a){"use strict";a.r(r);var s=a(25),n=Object(s.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"前端docker学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端docker学习"}},[e._v("#")]),e._v(" 前端docker学习")]),e._v(" "),a("h2",{attrs:{id:"docker介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker介绍"}},[e._v("#")]),e._v(" Docker介绍")]),e._v(" "),a("p",[a("strong",[e._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口")]),e._v("。它是目前最流行的 Linux 容器解决方案。")]),e._v(" "),a("p",[e._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),e._v(" "),a("p",[e._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样.")]),e._v(" "),a("h2",{attrs:{id:"docker-用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-用途"}},[e._v("#")]),e._v(" Docker 用途")]),e._v(" "),a("ul",[a("li",[e._v("提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),e._v(" "),a("li",[e._v("提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容")]),e._v(" "),a("li",[e._v("组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构")])]),e._v(" "),a("h2",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),a("p",[e._v("核心概念：镜像、容器与仓库")]),e._v(" "),a("p",[e._v("Docker 主要包含三个基本概念，分别是镜像、容器和仓库，理解了这三个概念，就理解了 Docker 的整个生命周期。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("镜像：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")])]),e._v(" "),a("li",[a("p",[e._v("容器：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间容器可以被。创建、启动、停止、删除和暂停等等，说到镜像与容器之间的关系，可以类比面向对象程序设计中的类和实例。")])]),e._v(" "),a("li",[a("p",[e._v("仓库：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号。")])])]),e._v(" "),a("h2",{attrs:{id:"docker安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[e._v("#")]),e._v(" Docker安装")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("mac"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("windows"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("centos"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("安装完成后，运行下面的命令，验证是否安装成功。"),a("code",[e._v("docker version")])]),e._v(" "),a("h2",{attrs:{id:"docker命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker命令"}},[e._v("#")]),e._v(" Docker命令")]),e._v(" "),a("div",{staticClass:"language-conf line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker info # 查看当前 Docker 运行环境\ndocker history # 查看镜像历史Layer层级信息\ndocker stats # 查看容器资源占用状态\ndocker logs # 查看容器stdout日志，加上 -f 持续输出\ndocker cp # 在容器和本地文件系统中拷贝文件\n\ndocker images # 查看本地镜像列表\ndocker rmi 镜像id # 删除镜像，-f表示强制\n\ndocker ps # 查看我们正在运行的容器\ndocker ps -a # 查看所有的容器\ndocker rm -f 容器id # 删除容器，-f表示强制\ndocker exec # 对容器执行命令，比如最常用的 docker exec -ti 容器id bash 进入容器终端 exit退出\ndocker start/restart/stop/pause/unpause 容器id # 对容器进行启动、重启、停止、暂停和取消暂停操作\n\ndocker login/logout # 登录/登出\ndocker pull name # 从仓库拉取镜像 name\ndocker push name:tag # 推送镜像到仓库\ndocker search name # 搜索仓库中的镜像 name\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("h2",{attrs:{id:"dockerfile语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile语法"}},[e._v("#")]),e._v(" DockerFile语法")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("FROM 指令用于指定要构建的镜像的基础镜像。它通常是 Dockerfile 中的第一条指令。")])]),e._v(" "),a("li",[a("p",[e._v("RUN 指令用于在镜像中执行命令，这会创建新的镜像层。每个 RUN 指令创建一个新的镜像层。")])]),e._v(" "),a("li",[a("p",[e._v("COPY 指令用于将文件作为一个新的层添加到镜像中。通常使用 COPY 指令将应用代码赋值到镜像中。")])]),e._v(" "),a("li",[a("p",[e._v("EXPOSE 指令用于记录应用所使用的网络端口。")])]),e._v(" "),a("li",[a("p",[e._v("ENTRYPOINT 指令用于指定镜像以容器方式启动后默认运行的程序。")])])]),e._v(" "),a("p",[e._v("其他的 Dockerfile 指令还有 LABEL、ENV、ONBUILD、HEALTHCHECK、CMD 等")]),e._v(" "),a("div",{staticClass:"language-conf line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install \\\n  && npm run build\nEXPOSE 3000\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("ul",[a("li",[e._v("FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。")]),e._v(" "),a("li",[e._v("COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。")]),e._v(" "),a("li",[e._v("WORKDIR /app：指定接下来的工作路径为/app。")]),e._v(" "),a("li",[e._v("RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。")]),e._v(" "),a("li",[e._v("Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，所以run的语句放在一起")]),e._v(" "),a("li",[e._v("EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。")])]),e._v(" "),a("div",{staticClass:"language-conf line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('docker build -t "liam:test" ./\n# 根据当前目录的dockerfile文件创建镜像liam，标签为test\ndocker run -d -p 8081:8080 -v /data/liam:/data/www --name=sniper-test liam:test\n# docker run sniper:test 根据镜像创建容器\n# -d 后台运行容器，并返回容器ID\n# -p 8081:8080 指定端口映射，格式为：主机(宿主)端口:容器端口，即主机8081端口映射到docker容器内部端口8080\n# -v /data/liam:/data/www 主机的目录 /data/liam 映射到容器的 /data/www\n# --name=sniper-test 为容器指定一个名称\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://c.biancheng.net/docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("C语言中文网 - docker教程"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("阮一峰的网络日志 - docker入门教程"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.runoob.com/docker/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("菜鸟教程 - docker教程"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker —— 从入门到实践"),a("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);